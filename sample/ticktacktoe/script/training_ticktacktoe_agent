#!/usr/local/bin/python

# Resolve path configucation
import os
import sys
import argparse

root = os.path.join(os.path.dirname(__file__), "../"*3)
src_path = os.path.join(root, "kyoka")
sample_path = os.path.join(root, "sample")
sys.path.append(root)
sys.path.append(src_path)
sys.path.append(sample_path)

import logging as log
log.basicConfig(format='[%(levelname)s] %(message)s', level=log.INFO)

from kyoka.algorithm.montecarlo.montecarlo import MonteCarlo
from kyoka.algorithm.td_learning.sarsa import Sarsa
from kyoka.algorithm.td_learning.q_learning import QLearning

from kyoka.algorithm.policy.epsilon_greedy_policy import EpsilonGreedyPolicy
from kyoka.algorithm.finish_rule.watch_iteration_count import WatchIterationCount
from kyoka.algorithm.finish_rule.watch_update_delta import WatchUpdateDelta
from kyoka.algorithm.finish_rule.manual_interruption import ManualInterruption

from sample.ticktacktoe.ticktacktoe_domain import TickTackToeDomain
from sample.ticktacktoe.ticktacktoe_table_value_function import TickTackToeTableValueFunction
from sample.ticktacktoe.ticktacktoe_helper import TickTackToeHelper

parser = argparse.ArgumentParser(description="Specify RL algorithm to use")
parser.add_argument("--algo", required=True, help='"montecarlo" or "sarsa" or "qlearning"')
args = parser.parse_args()
algo = args.algo
if algo not in ["montecarlo", "sarsa", "qlearning"]:
  raise ValueError("unknown algorithm [%s] passed." % algo)

VALUE_FUNC_SAVE_DATA_PATH = os.path.join(os.path.dirname(__file__), "%s_ticktacktoe_value_function_data.pickle" % algo)
INTERRUPTION_MONITOR_FILE_PATH = os.path.join(os.path.dirname(__file__), "interruption_order.txt")

RL_algo = {
    "montecarlo": lambda : MonteCarlo(),
    "sarsa": lambda : Sarsa(),
    "qlearning": lambda :QLearning()
}[algo]()

domain = TickTackToeDomain()
value_func = TickTackToeTableValueFunction()
value_func.setUp()

if os.path.isfile(VALUE_FUNC_SAVE_DATA_PATH):
  log.info("loading value function from %s" % VALUE_FUNC_SAVE_DATA_PATH)
  value_func.load(VALUE_FUNC_SAVE_DATA_PATH)
  log.info("finished loading value function")

policy = EpsilonGreedyPolicy(domain, value_func, eps=0.7)
watch_iteration = WatchIterationCount(target_count=100000, log_interval=10000)
watch_delta = WatchUpdateDelta(patience=100, minimum_required_delta=0.0001, log_interval=10000)
manual_interruption = ManualInterruption(monitor_file_path=INTERRUPTION_MONITOR_FILE_PATH, log_interval=10000)
finish_rules = [watch_iteration, manual_interruption]

log.info("started GPI iteration...")
RL_algo.GPI(domain, policy, value_func, finish_rules)


log.info("saving value function into %s" % VALUE_FUNC_SAVE_DATA_PATH)
value_func.save(VALUE_FUNC_SAVE_DATA_PATH)
log.info("finished saving value function")

